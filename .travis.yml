services: docker
branches:
  except: /^\d+$/
env:
- CHECK50_ORG="me50" CHECK50_REPO="cs50student2" CHECK50_BRANCH="cs50/problems/2020/x/hello" RESULTS_FILE="tests/results.json"
language: python
python: 3.6
install: pip install Flask lib50
script: |
  #!/bin/bash

  set -e

  # Generate key pair
  KEYS_DIR="$(mktemp -d)"
  openssl genpkey -out "$KEYS_DIR/private.pem" -outform PEM -algorithm RSA -pkeyopt rsa_keygen_bits:2048
  openssl pkey -pubout -inform PEM -outform PEM -in "$KEYS_DIR/private.pem" -out "$KEYS_DIR/public.pem"

  # Build image
  export TRAVIS_TAG="$(( $(git tag --list --sort=version:refname | tail -n1) + 1 ))"
  IMAGE="$TRAVIS_REPO_SLUG:$TRAVIS_TAG"
  docker build . -t "$IMAGE"

  # Run tests
  FLASK_APP=tests/app flask run -h 0.0.0.0 &
  docker run --network host -e "CHECK50_PRIVATE_KEY=$(< "$KEYS_DIR/private.pem")" "$IMAGE" \
    --branch "$CHECK50_BRANCH" \
    --callback-url "http://localhost:5000/validate" \
    --commit "$(jq -r .commit_hash $RESULTS_FILE)" \
    --job-id "$(jq -r .id $RESULTS_FILE)" \
    --org "$CHECK50_ORG" \
    --pushed-at "$(jq -r .pushed_at $RESULTS_FILE)" \
    --repo "$CHECK50_REPO"  \
    --slug "$CHECK50_BRANCH" \
    --style50 \
    --token "$GITHUB_TOKEN"

before_deploy:
- docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
- docker tag "$TRAVIS_REPO_SLUG:$TRAVIS_TAG" "$TRAVIS_REPO_SLUG:latest"
- git config --local user.name "bot50"
- git config --local user.email "bot@cs50.harvard.edu"
deploy:
- provider: script
  script: docker push "$TRAVIS_REPO_SLUG:$TRAVIS_TAG" && docker push "$TRAVIS_REPO_SLUG:latest"
  on:
    branch: master
- provider: releases
  api_key: $GITHUB_TOKEN
  skip_cleanup: true
  on:
    branch: master
notifications:
  slack:
    secure: UrH4tFdN4YQezSuUB9a8DnqTSWt/tY7gDXfOLPIM0weghSFbcsGNrCOGtO6gBipssEhaK+F9PZ6OQ7bGQtTIWrbhRQmI009WMRkRFz68gd9bVX/b2kdtn+rr3tefOuyORsG/cm5w2uMZl9DLlzV7I/Xg/yLYrteib6qiaJwmGQ2ohgK+2XoFROtPmdBRuIud2P8DVn4ICDGMrx05WmWyqXLe64VjARC1fHdeA3HM5F80iGnpN9skvRkQ3thByy8OAjNGNus4csQl/N90YgJqurkiTNTMex1M6cdtoIvX7K3tOwu2PpfASjbrQOayJV4hcbwZ5ohinHZQPhhvQAax9MN8h8qcIdk1gnFSia+V51MWN/o7bXPXS6PuSDNpHtWMYo9CDTgWITkG+eeOLaeVFVXtuYshXaHsiGeoHwjO+ukeFWI4ZNXA/fhhFsKIJCO6wyzj6+n7DIIHMUOJZUncDYszFIXO09Mfwzm9LeOtNiJ/kOoYtRDo7nBmBE8U/V3Vq87jHprjJVlmesj44n5QLuXd3WwZqJ1sdfseL+xCastIl6Ljxv/QXBnPPr26HepjumVbj4QjRwQ5mnEiU4N1dsler5LTwMlkL9HlMrFLPYfqSF5tzfExj8HgrkTprdPqolPEvDe6jrA0VlSwOBrumACGFKFtoYuaP/mJSVf6G4g=
